import fs from 'fs-extra';
import path from 'node:path';
import { dedent } from 'ts-dedent';
import { prettier } from '../../../../scripts/prepare/tools-esm';
import { globalsNameReferenceMap } from '../src/globals/globals';

const location = path.join(__dirname, '..', 'src', 'globals', 'exports.ts');

function removeDefault(input: string) {
  return input !== 'default';
}

const run = async () => {
  const grouped = Object.entries(globalsNameReferenceMap).reduce<Record<string, string[]>>(
    (acc, [key, value]) => {
      acc[value] = [...(acc[value] || []), key];
      return acc;
    },
    {}
  );

  const r = await Promise.all(
    Object.values(grouped).map(async (pkgs) => {
      const all = await Promise.all(
        pkgs.map(async (pkg) => {
          const mod = await import(pkg);
          return Object.keys(mod).filter(removeDefault);
        })
      );
      return { pkgs, e: all.find((a) => a.length > 0) };
    })
  );

  const data: Record<string, string[]> = {};

  for (const { pkgs, e } of r) {
    for (const pkg of pkgs) {
      data[pkg] = e || [];
    }
  }

  console.log({ data });

  // const o = r.map((m) => Object.keys(m).filter(removeDefault).sort());
  // const o = r;
  // const data = o.reduce<Partial<Record<keyof typeof globalPackages, string[]>>>(
  //   (acc, value, index) => {
  //     acc[globalPackages[index] as keyof typeof globalPackages] = value;
  //     return acc;
  //   },
  //   {}
  // );

  console.log('Generating...');

  const prettierConfig = await prettier.resolveConfig(location);
  const text = await prettier.format(
    dedent`
      // this file is generated by generate-exports-file.ts
      // this is done to prevent runtime dependencies from making it's way into the build/start script of the manager
      // the manager builder needs to know which dependencies are 'globalized' in the ui
      
      export default ${JSON.stringify(data, null, 2)} as const;
    `,
    { ...prettierConfig, parser: 'typescript' }
  );

  await fs.ensureFile(location);
  await fs.writeFile(location, text);

  console.log('Done!');
};

run().catch((e) => {
  console.error(e);
  process.exitCode = 1;
});
